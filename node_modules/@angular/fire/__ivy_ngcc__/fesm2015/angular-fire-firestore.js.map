{"version":3,"file":"angular-fire-firestore.js","sources":["../../../src/firestore/observable/fromRef.ts","../../../src/firestore/collection/changes.ts","../../../src/firestore/collection/collection.ts","../../../src/firestore/document/document.ts","../../../src/firestore/collection-group/collection-group.ts","../../../src/firestore/firestore.ts","../../../src/firestore/firestore.module.ts","../../../src/firestore/interfaces.ts"],"names":["USE_AUTH_EMULATOR"],"mappings":"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","sourcesContent":["import { asyncScheduler, Observable, SchedulerLike } from 'rxjs';\nimport { Action, DocumentReference, DocumentSnapshot, Query, QuerySnapshot, Reference } from '../interfaces';\nimport { map, pairwise, startWith } from 'rxjs/operators';\n\nfunction _fromRef<T, R>(ref: Reference<T>, scheduler: SchedulerLike = asyncScheduler): Observable<R> {\n  return new Observable(subscriber => {\n    let unsubscribe: () => void;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\n    }\n\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nexport function fromRef<R, T>(ref: DocumentReference<T> | Query<T>, scheduler?: SchedulerLike) {\n  return _fromRef<typeof ref, R>(ref, scheduler);\n}\n\nexport function fromDocRef<T>(ref: DocumentReference<T>, scheduler?: SchedulerLike): Observable<Action<DocumentSnapshot<T>>> {\n  return fromRef<DocumentSnapshot<T>, T>(ref, scheduler)\n    .pipe(\n      startWith(undefined),\n      pairwise(),\n      map(([priorPayload, payload]) => {\n        if (!payload.exists) {\n          return { payload, type: 'removed' };\n        }\n        if (!priorPayload?.exists) {\n          return { payload, type: 'added' };\n        }\n        return { payload, type: 'modified' };\n      })\n    );\n}\n\nexport function fromCollectionRef<T>(ref: Query<T>, scheduler?: SchedulerLike): Observable<Action<QuerySnapshot<T>>> {\n  return fromRef<QuerySnapshot<T>, T>(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n","import { fromCollectionRef } from '../observable/fromRef';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { distinctUntilChanged, map, pairwise, scan, startWith } from 'rxjs/operators';\nimport { DocumentChange, DocumentChangeAction, DocumentChangeType, Query } from '../interfaces';\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\nexport function docChanges<T>(query: Query, scheduler?: SchedulerLike): Observable<DocumentChangeAction<T>[]> {\n  return fromCollectionRef(query, scheduler)\n    .pipe(\n      startWith(undefined),\n      pairwise(),\n      map(([priorAction, action]) => {\n        const docChanges = action.payload.docChanges();\n        const actions = docChanges.map(change => ({ type: change.type, payload: change }));\n        // the metadata has changed from the prior emission\n        if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n          // go through all the docs in payload and figure out which ones changed\n          action.payload.docs.forEach((currentDoc, currentIndex) => {\n            const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n            const priorDoc = priorAction?.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n            if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) ||\n              !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\n              // document doesn't appear to have changed, don't log another action\n            } else {\n              // since the actions are processed in order just push onto the array\n              actions.push({\n                type: 'modified',\n                payload: {\n                  oldIndex: currentIndex,\n                  newIndex: currentIndex,\n                  type: 'modified',\n                  doc: currentDoc\n                }\n              });\n            }\n          });\n        }\n        return actions as DocumentChangeAction<T>[];\n      }),\n  );\n}\n\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\nexport function sortedChanges<T>(\n  query: Query,\n  events: DocumentChangeType[],\n  scheduler?: SchedulerLike): Observable<DocumentChangeAction<T>[]> {\n  return docChanges<T>(query, scheduler)\n    .pipe(\n      scan((current, changes) => combineChanges<T>(current, changes.map(it => it.payload), events), []),\n      distinctUntilChanged(), // cut down on unneed change cycles\n      map(changes => changes.map(c => ({ type: c.type, payload: c } as DocumentChangeAction<T>))));\n}\n\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\nexport function combineChanges<T>(current: DocumentChange<T>[], changes: DocumentChange<T>[], events: DocumentChangeType[]) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice<T>(\n  original: T[],\n  start: number,\n  deleteCount: number,\n  ...args: T[]\n): T[] {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\nexport function combineChange<T>(combined: DocumentChange<T>[], change: DocumentChange<T>): DocumentChange<T>[] {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\n","import { from, Observable } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { filter, map, observeOn, pairwise, scan, startWith } from 'rxjs/operators';\nimport firebase from 'firebase/app';\n\nimport { CollectionReference, DocumentChangeAction, DocumentChangeType, DocumentData, DocumentReference, Query } from '../interfaces';\nimport { docChanges, sortedChanges } from './changes';\nimport { AngularFirestoreDocument } from '../document/document';\nimport { AngularFirestore } from '../firestore';\n\nexport function validateEventsArray(events?: DocumentChangeType[]) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n  return events;\n}\n\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollection<T = DocumentData> {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  constructor(\n    public readonly ref: CollectionReference<T>,\n    private readonly query: Query<T>,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    let source = docChanges<T>(this.query, this.afs.schedulers.outsideAngular);\n    if (events && events.length > 0) {\n      source = source.pipe(\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1))\n      );\n    }\n    return source.pipe(\n      // We want to filter out empty arrays, but always emit at first, so the developer knows\n      // that the collection has been resolve; even if it's empty\n      startWith(undefined),\n      pairwise(),\n      filter(([prior, current]) => current.length > 0 || !prior),\n      map(([prior, current]) => current),\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(): Observable<T[]>;\n  // tslint:disable-next-line:unified-signatures\n  valueChanges({}): Observable<T[]>;\n  valueChanges<K extends string>(options: {idField: K}): Observable<(T & { [T in K]: string })[]>;\n  valueChanges<K extends string>(options: {idField?: K} = {}): Observable<T[]> {\n    return fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        map(actions => actions.payload.docs.map(a => {\n          if (options.idField) {\n            return {\n              ...a.data() as {},\n              ...{ [options.idField]: a.id }\n            } as T & { [T in K]: string };\n          } else {\n            return a.data();\n          }\n        })),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options?: firebase.firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular),\n    );\n  }\n\n  /**\n   * Add data to a collection reference.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query.\n   */\n  add(data: T): Promise<DocumentReference<T>> {\n    return this.ref.add(data);\n  }\n\n  /**\n   * Create a reference to a single document in a collection.\n   */\n  doc<T2 = T>(path?: string): AngularFirestoreDocument<T2> {\n    // TODO is there a better way to solve this type issue\n    return new AngularFirestoreDocument(this.ref.doc(path) as any, this.afs);\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { Action, DocumentData, DocumentReference, DocumentSnapshot, QueryFn, SetOptions } from '../interfaces';\nimport { fromDocRef } from '../observable/fromRef';\nimport { map, observeOn } from 'rxjs/operators';\nimport { AngularFirestore, associateQuery } from '../firestore';\nimport { AngularFirestoreCollection } from '../collection/collection';\nimport firebase from 'firebase/app';\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\nexport class AngularFirestoreDocument<T = DocumentData> {\n\n  /**\n   * The constructor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  constructor(public ref: DocumentReference<T>, private afs: AngularFirestore) { }\n\n  /**\n   * Create or overwrite a single document.\n   */\n  set(data: T, options?: SetOptions): Promise<void> {\n    return this.ref.set(data, options);\n  }\n\n  /**\n   * Update some fields of a document without overwriting the entire document.\n   */\n  update(data: Partial<T>): Promise<void> {\n    return this.ref.update(data);\n  }\n\n  /**\n   * Delete a document.\n   */\n  delete(): Promise<void> {\n    return this.ref.delete();\n  }\n\n  /**\n   * Create a reference to a sub-collection given a path and an optional query\n   * function.\n   */\n  collection<R = DocumentData>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<R> {\n    const collectionRef = this.ref.collection(path) as firebase.firestore.CollectionReference<R>;\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n\n  /**\n   * Listen to snapshot updates from the document.\n   */\n  snapshotChanges(): Observable<Action<DocumentSnapshot<T>>> {\n    const scheduledFromDocRef$ = fromDocRef<T>(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to unwrapped snapshot updates from the document.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(options?: { }): Observable<T | undefined>;\n  valueChanges<K extends string>(options: { idField: K }): Observable<(T & { [T in K]: string }) | undefined>;\n  valueChanges<K extends string>(options: { idField?: K } = {}): Observable<T | undefined> {\n    return this.snapshotChanges().pipe(\n      map(({ payload }) =>\n        options.idField ? {\n          ...payload.data(),\n          ...{ [options.idField]: payload.id }\n        } as T & { [T in K]: string } : payload.data()\n      )\n    );\n  }\n\n  /**\n   * Retrieve the document once.\n   */\n  get(options?: firebase.firestore.GetOptions) {\n    return from(this.ref.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular),\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { filter, map, observeOn, scan } from 'rxjs/operators';\nimport firebase from 'firebase/app';\n\nimport { DocumentChangeAction, DocumentChangeType, DocumentData, Query } from '../interfaces';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nimport { AngularFirestore } from '../firestore';\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollectionGroup<T = DocumentData> {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  constructor(\n    private readonly query: Query<T>,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    if (!events || events.length === 0) {\n      return docChanges<T>(this.query, this.afs.schedulers.outsideAngular).pipe(\n        this.afs.keepUnstableUntilFirst\n      );\n    }\n    return docChanges<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1)),\n        filter(changes =>  changes.length > 0),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(): Observable<T[]>;\n  // tslint:disable-next-line:unified-signatures\n  valueChanges({}): Observable<T[]>;\n  valueChanges<K extends string>(options: {idField: K}): Observable<(T & { [T in K]: string })[]>;\n  valueChanges<K extends string>(options: {idField?: K} = {}): Observable<T[]> {\n    const fromCollectionRefScheduled$ = fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$\n      .pipe(\n        map(actions => actions.payload.docs.map(a => {\n          if (options.idField) {\n            return {\n              [options.idField]: a.id,\n              ...a.data()\n            } as T & { [T in K]: string };\n          } else {\n            return a.data();\n          }\n        })),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options?: firebase.firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular)\n    );\n  }\n\n}\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  AssociatedReference,\n  CollectionReference,\n  DocumentReference,\n  PersistenceSettings,\n  Query,\n  QueryFn,\n  QueryGroupFn,\n  Settings\n} from './interfaces';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\nimport { AngularFirestoreCollectionGroup } from './collection-group/collection-group';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory,\n  FirebaseApp\n} from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { USE_EMULATOR as USE_AUTH_EMULATOR } from '@angular/fire/auth';\nimport { ɵfetchInstance, ɵlogAuthEmulatorError } from '@angular/fire';\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nexport const ENABLE_PERSISTENCE = new InjectionToken<boolean>('angularfire2.enableFirestorePersistence');\nexport const PERSISTENCE_SETTINGS = new InjectionToken<PersistenceSettings | undefined>('angularfire2.firestore.persistenceSettings');\nexport const SETTINGS = new InjectionToken<Settings>('angularfire2.firestore.settings');\n\n// SEMVER(7): use Parameters to detirmine the useEmulator arguments\n// type UseEmulatorArguments = Parameters<typeof firebase.firestore.Firestore.prototype.useEmulator>;\ntype UseEmulatorArguments = [string, number];\nexport const USE_EMULATOR = new InjectionToken<UseEmulatorArguments>('angularfire2.firestore.use-emulator');\n\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nexport function associateQuery<T>(collectionRef: CollectionReference<T>, queryFn = ref => ref): AssociatedReference<T> {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return { query, ref };\n}\n\ntype InstanceCache = Map<FirebaseApp, [\n  firebase.firestore.Firestore,\n  firebase.firestore.Settings | null,\n  UseEmulatorArguments | null,\n  boolean | null]\n>;\n\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFirestore {\n  public readonly firestore: firebase.firestore.Firestore;\n  public readonly persistenceEnabled$: Observable<boolean>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   */\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    @Optional() @Inject(ENABLE_PERSISTENCE) shouldEnablePersistence: boolean | null,\n    @Optional() @Inject(SETTINGS) settings: Settings | null,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(PERSISTENCE_SETTINGS) persistenceSettings: PersistenceSettings | null,\n    @Optional() @Inject(USE_EMULATOR) _useEmulator: any,\n    @Optional() @Inject(USE_AUTH_EMULATOR) useAuthEmulator: any,\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n\n    const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n    if (!firebase.auth && useAuthEmulator) {\n      ɵlogAuthEmulatorError();\n    }\n    const useEmulator: UseEmulatorArguments | null = _useEmulator;\n\n    [this.firestore, this.persistenceEnabled$] = ɵfetchInstance(`${app.name}.firestore`, 'AngularFirestore', app, () => {\n      const firestore = zone.runOutsideAngular(() => app.firestore());\n      if (settings) {\n        firestore.settings(settings);\n      }\n      if (useEmulator) {\n        firestore.useEmulator(...useEmulator);\n      }\n\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        const enablePersistence = () => {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n          } catch (e) {\n            if (typeof console !== 'undefined') { console.warn(e); }\n            return of(false);\n          }\n        };\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n\n    }, [settings, useEmulator, shouldEnablePersistence]);\n  }\n\n  /**\n   * Create a reference to a Firestore Collection based on a path or\n   * CollectionReference and an optional query function to narrow the result\n   * set.\n   */\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>;\n  // tslint:disable-next-line:unified-signatures\n  collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>;\n  collection<T>(pathOrRef: string | CollectionReference<T>, queryFn?: QueryFn): AngularFirestoreCollection<T> {\n    let collectionRef: CollectionReference<T>;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef) as firebase.firestore.CollectionReference<T>;\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const { ref, query } = associateQuery<T>(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection<T>(refInZone, query, this);\n  }\n\n  /**\n   * Create a reference to a Firestore Collection Group based on a collectionId\n   * and an optional query function to narrow the result\n   * set.\n   */\n  collectionGroup<T>(collectionId: string, queryGroupFn?: QueryGroupFn<T>): AngularFirestoreCollectionGroup<T> {\n    const queryFn = queryGroupFn || (ref => ref);\n    const collectionGroup: Query<T> = this.firestore.collectionGroup(collectionId) as firebase.firestore.Query<T>;\n    return new AngularFirestoreCollectionGroup<T>(queryFn(collectionGroup), this);\n  }\n\n  /**\n   * Create a reference to a Firestore Document based on a path or\n   * DocumentReference. Note that documents are not queryable because they are\n   * simply objects. However, documents have sub-collections that return a\n   * Collection reference and can be queried.\n   */\n  doc<T>(path: string): AngularFirestoreDocument<T>;\n  // tslint:disable-next-line:unified-signatures\n  doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>;\n  doc<T>(pathOrRef: string | DocumentReference<T>): AngularFirestoreDocument<T> {\n    let ref: DocumentReference<T>;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef) as firebase.firestore.DocumentReference<T>;\n    } else {\n      ref = pathOrRef;\n    }\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument<T>(refInZone, this);\n  }\n\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PersistenceSettings } from './interfaces';\nimport { AngularFirestore, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS } from './firestore';\n\n@NgModule({\n  providers: [ AngularFirestore ]\n})\nexport class AngularFirestoreModule {\n  /**\n   * Attempt to enable persistent storage, if possible\n   */\n  static enablePersistence(persistenceSettings?: PersistenceSettings): ModuleWithProviders<AngularFirestoreModule> {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [\n        { provide: ENABLE_PERSISTENCE, useValue: true },\n        { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\n      ]\n    };\n  }\n}\n","import { Subscriber } from 'rxjs';\nimport firebase from 'firebase/app';\n\nexport type Settings =  firebase.firestore.Settings;\nexport type CollectionReference<T = DocumentData> = firebase.firestore.CollectionReference<T>;\nexport type DocumentReference<T = DocumentData> = firebase.firestore.DocumentReference<T>;\nexport type PersistenceSettings = firebase.firestore.PersistenceSettings;\nexport type DocumentChangeType = firebase.firestore.DocumentChangeType;\nexport type SnapshotOptions = firebase.firestore.SnapshotOptions;\nexport type FieldPath = firebase.firestore.FieldPath;\nexport type Query<T = DocumentData> = firebase.firestore.Query<T>;\n\nexport type SetOptions = firebase.firestore.SetOptions;\nexport type DocumentData = firebase.firestore.DocumentData;\n\nexport interface DocumentSnapshotExists<T> extends firebase.firestore.DocumentSnapshot {\n  readonly exists: true;\n  data(options?: SnapshotOptions): T;\n}\n\nexport interface DocumentSnapshotDoesNotExist extends firebase.firestore.DocumentSnapshot {\n  readonly exists: false;\n  data(options?: SnapshotOptions): undefined;\n  get(fieldPath: string | FieldPath, options?: SnapshotOptions): undefined;\n}\n\nexport type DocumentSnapshot<T> = DocumentSnapshotExists<T> | DocumentSnapshotDoesNotExist;\n\nexport interface QueryDocumentSnapshot<T> extends firebase.firestore.QueryDocumentSnapshot {\n  data(options?: SnapshotOptions): T;\n}\n\nexport interface QuerySnapshot<T> extends firebase.firestore.QuerySnapshot {\n  readonly docs: QueryDocumentSnapshot<T>[];\n}\n\nexport interface DocumentChange<T> extends firebase.firestore.DocumentChange {\n  readonly doc: QueryDocumentSnapshot<T>;\n}\n\nexport interface DocumentChangeAction<T> {\n  type: DocumentChangeType;\n  payload: DocumentChange<T>;\n}\n\nexport interface Action<T> {\n  type: string;\n  payload: T;\n}\n\nexport interface Reference<T> {\n  onSnapshot: (options: firebase.firestore.SnapshotListenOptions, sub: Subscriber<any>) => any;\n}\n\n// A convience type for making a query.\n// Example: const query = (ref) => ref.where('name', == 'david');\nexport type QueryFn<T = DocumentData> = (ref: CollectionReference<T>) => Query<T>;\n\nexport type QueryGroupFn<T = DocumentData> = (query: Query<T>) => Query<T>;\n\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n *\n * Example:\n *\n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n *\n * // This addition would not be a result of the query above\n * ref.add({\n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n */\nexport interface AssociatedReference<T = DocumentData> {\n  ref: CollectionReference<T>;\n  query: Query<T>;\n}\n"]}